#Chatbot Backend

import http.server
import socketserver
import os
from http import HTTPStatus
import threading
import socket

# Define host and port
HOST = 'localhost'
PORT = 8080

# Define a basic HTTP request handler
class SimpleHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/':
            self.path = 'index.html'
        return http.server.SimpleHTTPRequestHandler.do_GET(self)

# Serve the static files
def start_http_server():
    os.chdir(os.path.dirname(os.path.abspath(__file__)))  # Serve from current directory
    with socketserver.TCPServer((HOST, PORT), SimpleHTTPRequestHandler) as httpd:
        print(f"Serving at {HOST}:{PORT}")
        httpd.serve_forever()

# Simple WebSocket handler
class WebSocketServer:
    def __init__(self, host='localhost', port=8765):
        self.host = host
        self.port = port
        self.clients = []

    def start(self):
        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_socket.bind((self.host, self.port))
        server_socket.listen(5)
        print(f"WebSocket server listening on {self.host}:{self.port}")

        while True:
            client_socket, address = server_socket.accept()
            print(f"Client connected: {address}")
            self.clients.append(client_socket)
            threading.Thread(target=self.handle_client, args=(client_socket,)).start()

    def handle_client(self, client_socket):
        while True:
            try:
                message = client_socket.recv(1024).decode()
                if not message:
                    break
                print(f"Received: {message}")
                self.broadcast(message, client_socket)
            except ConnectionResetError:
                break
        client_socket.close()
        self.clients.remove(client_socket)
        print("Client disconnected")

    def broadcast(self, message, sender_socket):
        for client in self.clients:
            if client != sender_socket:
                client.sendall(message.encode())

# Start both the HTTP server and WebSocket server in separate threads
if __name__ == '__main__':
    threading.Thread(target=start_http_server).start()
    websocket_server = WebSocketServer()
    websocket_server.start()
